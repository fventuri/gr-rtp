/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(source.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(ef8b19d120ecba16aa0100548e088506)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/rtp/source.h>
// pydoc.h is automatically generated in the build directory
#include <source_pydoc.h>

template <typename T>
void bind_source_template(py::module& m, const char *classname)
{
    using source = gr::rtp::source<T>;

    py::class_<source, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<source>>(m, classname, D(source))

        .def(py::init(&source::make),
             py::arg("mcast_addresss"),
             py::arg("ssrc"),
             py::arg("in_channels") = 1,
             py::arg("out_channels") = 1,
             py::arg("quiet") = false,
             D(source, make))


        .def("get_bits_per_sample",
             &source::get_bits_per_sample,
             D(source, get_bits_per_sample))


        .def("get_channels", &source::get_channels, D(source, get_channels))


        .def("set_ssrc",
             &source::set_ssrc,
             py::arg("ssrc"),
             D(source, set_ssrc))


        .def("get_ssrc",
             &source::get_ssrc,
             D(source, get_ssrc))

        ;
}

void bind_source(py::module &m)
{
    bind_source_template<gr_complex>(m, "source_c");
    bind_source_template<float>(m, "source_f");
    bind_source_template<std::int16_t>(m, "source_s");
}
